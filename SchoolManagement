import java.util.*;

// Abstract Class: Person
abstract class Person {
    protected String name;
    protected final int id;

    public Person(String name, int id) {
        this.name = name;
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public abstract void displayDetails();
}

// Class: Student
class Student extends Person {
    private List<String> courses;
    private static int totalStudents = 0;

    public Student(String name, int id, List<String> courses) {
        super(name, id);
        this.courses = new ArrayList<>(courses);
        totalStudents++;
    }

    public void addCourse(String course) {
        if (!courses.contains(course)) {
            courses.add(course);
        }
    }

    public boolean isTakingCourse(String course) {
        return courses.contains(course);
    }

    @Override
    public void displayDetails() {
        System.out.println("Student ID: " + id + ", Name: " + name + ", Courses: " + courses);
    }

    public List<String> getCourses() {
        return courses;
    }

    public static int getTotalStudents() {
        return totalStudents;
    }
}

// Class: Teacher
class Teacher extends Person {
    private Set<String> courses;
    private static final String SCHOOL_NAME = "Green Valley High School";

    public Teacher(String name, int id, Set<String> courses) {
        super(name, id);
        this.courses = new HashSet<>(courses);
    }

    public void addCourse(String course) {
        courses.add(course);
    }

    public boolean teachesCourse(String course) {
        return courses.contains(course);
    }

    @Override
    public void displayDetails() {
        System.out.println("Teacher ID: " + id + ", Name: " + name + ", Courses: " + courses + ", School: " + SCHOOL_NAME);
    }

    public Set<String> getCourses() {
        return courses;
    }
}

// Interface: ClassManagement
interface ClassManagement {
    void assignStudentToClass(Student student);
    List<Student> getClassStudents();
}

// Class: Classroom
class Classroom implements ClassManagement {
    private Map<Integer, Student> students = new HashMap<>();
    private Teacher teacher;

    public Classroom(Teacher teacher) {
        this.teacher = teacher;
    }

    @Override
    public void assignStudentToClass(Student student) {
        students.put(student.id, student);
    }

    @Override
    public List<Student> getClassStudents() {
        return new ArrayList<>(students.values());
    }

    public void displayClassInfo() {
        System.out.println("Teacher: " + teacher.getName());
        System.out.println("Students in this class:");
        for (Student student : students.values()) {
            student.displayDetails();
        }
    }
}

// Class: School
class School {
    private List<Student> students = new ArrayList<>();
    private List<Teacher> teachers = new ArrayList<>();
    private List<Classroom> classrooms = new ArrayList<>();
    private Set<String> courses = new HashSet<>();

    public School() {
    }

    public void addStudent(Student student) {
        students.add(student);
    }

    public void addTeacher(Teacher teacher) {
        teachers.add(teacher);
    }

    public void addClassroom(Classroom classroom) {
        classrooms.add(classroom);
    }

    public void addCourse(String course) {
        courses.add(course);
    }

    public Map<String, Map<String, Object>> generateCourseMapping() {
        Map<String, Map<String, Object>> courseMapping = new HashMap<>();

        for (String course : courses) {
            Map<String, Object> details = new HashMap<>();
            List<Teacher> courseTeachers = findTeachersByCourse(course);
            List<Student> courseStudents = new ArrayList<>();

            for (Student student : students) {
                if (student.isTakingCourse(course)) {
                    courseStudents.add(student);
                }
            }

            details.put("Teachers", courseTeachers);
            details.put("Students", courseStudents);
            courseMapping.put(course, details);
        }
        return courseMapping;
    }

    public List<Teacher> findTeachersByCourse(String course) {
        List<Teacher> result = new ArrayList<>();
        for (Teacher teacher : teachers) {
            if (teacher.teachesCourse(course)) {
                result.add(teacher);
            }
        }
        return result;
    }

    public List<Student> findStudentsByTeacher(String teacherName) {
        List<Student> result = new ArrayList<>();
        for (Classroom classroom : classrooms) {
            if (classroom.teacher.getName().equals(teacherName)) {
                result.addAll(classroom.getClassStudents());
            }
        }
        return result;
    }

    public void updateStudentCourses(int studentId, List<String> newCourses) {
        for (Student student : students) {
            if (student.id == studentId) {
                student.courses = newCourses;
                break;
            }
        }
    }

    public void reassignTeacherCourse(String course, Teacher newTeacher) {
        for (Teacher teacher : teachers) {
            if (teacher.teachesCourse(course)) {
                teacher.courses.remove(course);
                break;
            }
        }
        newTeacher.addCourse(course);
        addTeacher(newTeacher);
    }

    public void displaySchoolDetails() {
        System.out.println("School details:");
        System.out.println("Courses offered: " + courses);
        System.out.println("Students:");
        for (Student student : students) {
            student.displayDetails();
        }
        System.out.println("Teachers:");
        for (Teacher teacher : teachers) {
            teacher.displayDetails();
        }
    }
}

// Main Class: SchoolManagementSystem
public class SchoolManagementSystem {
    public static void main(String[] args) {
        // Creating subjects for students
        List<String> subjects1 = new ArrayList<>(Arrays.asList("Math", "Science"));
        List<String> subjects2 = new ArrayList<>(Arrays.asList("Math", "Art"));

        // Creating Students
        Student student1 = new Student("Alice", 1, subjects1);
        Student student2 = new Student("Bob", 2, subjects2);

        // Creating a set of courses for the teacher
        Set<String> teacherCourses = new HashSet<>(Arrays.asList("Math", "Science"));

        // Creating a Teacher
        Teacher teacher1 = new Teacher("Mr. Smith", 101, teacherCourses);

        // Creating a Classroom and assigning teacher
        Classroom classroom1 = new Classroom(teacher1);

        // Assigning students to the classroom
        classroom1.assignStudentToClass(student1);
        classroom1.assignStudentToClass(student2);

        // Creating a School
        School school = new School();

        // Adding entities to the school
        school.addStudent(student1);
        school.addStudent(student2);
        school.addTeacher(teacher1);
        school.addClassroom(classroom1);
        school.addCourse("Math");
        school.addCourse("Science");
        school.addCourse("Art");

        // Updating student courses
        List<String> newCourses = new ArrayList<>(Arrays.asList("Math", "History"));
        school.updateStudentCourses(1, newCourses); // Updating courses for student with ID 1

        // Reassigning teacher course
        Teacher newTeacher = new Teacher("Mrs. Johnson", 102, new HashSet<>());
        school.reassignTeacherCourse("Math", newTeacher);

        // Displaying classroom info
        classroom1.displayClassInfo();

        // Displaying total number of students
        System.out.println("Total number of students: " + Student.getTotalStudents());

        // Finding teachers by course
        List<Teacher> mathTeachers = school.findTeachersByCourse("Math");
        System.out.println("Teachers teaching Math: " + mathTeachers);

        // Finding students by teacher
        List<Student> studentsOfTeacher = school.findStudentsByTeacher("Mr. Smith");
        System.out.println("Students taught by Mr. Smith: " + studentsOfTeacher);

        // Displaying school details
        school.displaySchoolDetails();
    }
}
